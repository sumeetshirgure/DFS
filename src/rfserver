#!/usr/bin/env python3

from concurrent import futures
import time
import logging
import os, sys
import grpc, pickle
import fuse
import simplejson, json

import service_pb2
import service_pb2_grpc

_ONE_DAY_IN_SECONDS = 60 * 24 * 24

logging.basicConfig()
logger = logging.getLogger('tcpserver')
hdlr = logging.FileHandler('/home/kira/DFS/src/server.log')
logger.addHandler(hdlr)
logger.setLevel(logging.INFO)
rport = 7897


class MyStat(fuse.Stat):
    def __init__(self):
        self.st_mode = 0
        self.st_ino = 0
        self.st_dev = 0
        self.st_nlink = 0
        self.st_uid = 0
        self.st_gid = 0
        self.st_size = 0
        self.st_atime = 0
        self.st_mtime = 0
        self.st_ctime = 0


class Greeter(service_pb2_grpc.GreeterServicer):

    def fuse_access(self, request, context):
        global logger
        
        path = request.mpt + request.path
        logger.info("access called on %s %d %d", path, request.mode)
        ans = 0
        if not os.access(request.path, request.mode):
            ans = -EACCES

        ans = pickle.dumps(ans)
        return service_pb2.MessageReply(pstr=ans)

    def fuse_readdir(self, request, context):
        global logger
        
        path = request.mpt + request.path
        logger.info("readdir called on %s", path)
        ans = list(map(fuse.Direntry, list(os.listdir(path))))
        ans = pickle.dumps(ans)

        return service_pb2.MessageReply(pstr=ans)

    def fuse_getattr(self, request, context):
        global logger

        path = request.mpt + request.path
        logger.info("getattr called on %s", path)
        ans = os.lstat(path)
        ans = pickle.dumps(ans)
        
        return service_pb2.MessageReply(pstr=ans)

def serve():
    global rport
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=1))
    service_pb2_grpc.add_GreeterServicer_to_server(Greeter(), server)
    server.add_insecure_port('[::]:7897')
    server.start()
    try:
        while True:
            time.sleep(_ONE_DAY_IN_SECONDS)
    except KeyboardInterrupt:
        server.stop(0)


if __name__ == '__main__':
    serve()