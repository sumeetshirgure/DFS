#!/usr/bin/env python3

from readerwriterlock import rwlock
from concurrent import futures
import time
import logging
import os, sys
import grpc, pickle
import fuse
import simplejson, json

from errno import *
from stat import *
import fcntl
import _find_fuse_parts
import fuse
from fuse import Fuse

import service_pb2
import service_pb2_grpc
import random, threading



_ONE_DAY_IN_SECONDS = 60 * 60 * 24

logging.basicConfig()
logger = logging.getLogger('cserver')
hdlr = logging.FileHandler('cserver.log')
hdlr.setFormatter(logging.Formatter('[%(lineno)s @ %(funcName)10s()] %(message)s'))
logger.addHandler(hdlr)
logger.setLevel(logging.INFO)
cip = ['10.145.134.255', '10.145.134.255']
# cip = ['10.109.57.201', '10.109.57.201']
cport = [7899,7900]
rport = 7897
oid = 0
cchannel = None

fslock = rwlock.RWLockFair()

def flag2mode(flags):
	md = {os.O_RDONLY: 'r', os.O_WRONLY: 'w', os.O_RDWR: 'w+'}
	m = md[flags & (os.O_RDONLY | os.O_WRONLY | os.O_RDWR)]

	if flags & os.O_APPEND:
		m = m.replace('w', 'a', 1)

	return m

allClients = set()
replicaDict = {}

def getWriteLock():
	w = fslock.gen_wlock()
	while not w.acquire(blocking=True, timeout=1):
		time.sleep(random.uniform(0, 1))
	return w

def getReadLock():
	r = fslock.gen_rlock()
	while not r.acquire(blocking=True, timeout=1):
		time.sleep(random.uniform(0, 1))
	return r


class CGreeter(service_pb2_grpc.CGreeterServicer):

	def c_getR(self, request, context):
		oip = replicaDict[request.ip]
		logger.info('getR %s %s', request.ip, oip)
		return service_pb2.MessageReply(pstr=pickle.dumps(oip))

	def sand_nodes(self, request, context):
		rlock = getReadLock()
		ans = (allClients, replicaDict)
		rlock.release()
		return service_pb2.MessageReply(pstr=pickle.dumps(ans))
		


	def c_join(self, request, context):

		wlock = getWriteLock()
		global allClients, replicaDict

		clientIP = context.peer().split(':')[1]
		# please be ipv4
		

		if request.byPrimary:
			logger.info('join %s', request.ip)
			logger.info(allClients)
			allClients.add(request.ip)
			p1 = pickle.loads(request.p1)
			p2 = pickle.loads(request.p2)
			if p1[0]:
				replicaDict[p1[0]] = p1[1]

			if p2[0]:
				replicaDict[p2[0]] = p2[1]
			wlock.release()
			return service_pb2.MessageReply(pstr=b'1')

		logger.info('join %s', clientIP)
		

		#sand nodes to frand
		while True:
			try:
				rchoice = ''
				logger.info(allClients)
				p1 = ('','')
				p2 = ('','')

				if len(allClients) == 0:
					pass
				elif len(allClients) == 1:
					rchoice = random.choice(list(allClients))
					p1 = (clientIP, rchoice)
					p2 = (rchoice, clientIP)
				elif len(allClients) > 1:
					rchoice = random.choice(list(allClients))
					p1 = (clientIP, rchoice)

				stub = service_pb2_grpc.CGreeterStub(cchannel)
				stub.c_join(service_pb2.CMessageRequest(byPrimary=True, ip=clientIP,
					p1=pickle.dumps(p1), p2=pickle.dumps(p2)),
					timeout=random.uniform(5,7))
				break
			except grpc.RpcError as e:
				logger.info(str(e))
				if e.code() == grpc.StatusCode.DEADLINE_EXCEEDED:
					wlock.release()
					time.sleep(random.uniform(0,1))
					wlock = getWriteLock()
					continue
				elif e.code() == grpc.StatusCode.UNAVAILABLE:
					break
				else:
					logger.info(str(e))
					wlock.release()
					raise e

		ret = False
		if clientIP in allClients:
			if len(allClients) == 0:
				pass
			ret = True
			otherIP = replicaDict[clientIP]

			logger.info('here %s', otherIP)


			with grpc.insecure_channel('%s:%d'%(otherIP, rport)) as c1:
				s1 = service_pb2_grpc.GreeterStub(c1)
				s1.s_replicate(service_pb2.SReplicationRequest(myip=otherIP, oip=clientIP, type=0))

			for c, r in replicaDict.items():
				if r == clientIP:                        
					with grpc.insecure_channel('%s:%d'%(c, rport)) as c1:
						s1 = service_pb2_grpc.GreeterStub(c1)
						s1.s_replicate(service_pb2.SReplicationRequest(myip=c, oip=r, type=1))                    

		else:
			if len(allClients) == 0:
				pass
			elif len(allClients) == 1:
				otherIP = list(allClients)[0]


				with grpc.insecure_channel('%s:%d'%(clientIP, rport)) as c2:
					s2 = service_pb2_grpc.GreeterStub(c2)
					s2.s_replicate(service_pb2.SReplicationRequest(myip=clientIP, oip = otherIP, type=1))                


				with grpc.insecure_channel('%s:%d'%(otherIP, rport)) as c1:
					s1 = service_pb2_grpc.GreeterStub(c1)
					s1.s_replicate(service_pb2.SReplicationRequest(myip=otherIP, oip=clientIP, type=1))

				replicaDict[clientIP] = otherIP
				replicaDict[otherIP] = clientIP

			else:
				otherIP = rchoice
				try:
					with grpc.insecure_channel('%s:%d'%(clientIP, rport)) as c1:
						s1 = service_pb2_grpc.GreeterStub(c1)
						s1.s_replicate(service_pb2.SReplicationRequest(myip=clientIP, oip=otherIP, type=1))
				except:
					logger.info('replica offline')
					pass

				replicaDict[clientIP] = otherIP

			allClients.add(clientIP)

		wlock.release()
		return service_pb2.MessageReply(pstr=pickle.dumps(ret))
	

def serve():
	server = grpc.server(futures.ThreadPoolExecutor(max_workers=2))
	service_pb2_grpc.add_CGreeterServicer_to_server(CGreeter(), server)
	server.add_insecure_port('[::]:%d'%cport[1-oid])
	server.start()

	logger.info('sand nodes')
	global allClients, replicaDict
	while True:
		try:
			stub = service_pb2_grpc.CGreeterStub(cchannel)
			ans = stub.sand_nodes(service_pb2.CMessageRequest())
			allClients, replicaDict = pickle.loads(ans.pstr)
			break
		except grpc.RpcError as e:
			logger.info(str(e))
			time.sleep(0.1)
			continue

	logger.info('got nodes')
	try:
		while True:
			time.sleep(_ONE_DAY_IN_SECONDS)
	except KeyboardInterrupt:
		server.stop(0)


if __name__ == '__main__':
	oid = 1 - int(sys.argv[1])
	cchannel = grpc.insecure_channel('%s:%d'%(cip[oid], cport[oid]))

	serve()