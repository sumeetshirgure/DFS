#!/usr/bin/env python3

import os, sys

import fuse
from fuse import Fuse

import socket

import pickle

if not hasattr(fuse, '__version__') :
    raise RuntimeError("Your fuse-py doesn't know of fuse.__version__. Try updating.")

fuse.fuse_python_api = (0, 2)
fuse.feature_assert('has_init', 'has_destroy')

class RFS(Fuse) :
    """
    Remote virtual file system.
    """

    def __init__(self, server_hostname, vdir, *args, **kw) :
        Fuse.__init__(self, *args, **kw)
        self.server_hostname = server_hostname
        self.vdir = vdir
        self.server_port = 7897

    def create_sock(self):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((self.server_hostname, self.server_port))
        sockfile = self.sock.makefile()
        return sock, sockfile

    def fsinit(self) :
        pass

    def fsdestroy(self) :
        pass
        # sock, sockfile = self.create_sock()
        # sock.sendall(b'unmount\n')
        # sock.close()

    def get_response(self, sockfile) :
        size = int( sockfile.readline().strip() )
        data = sockfile.read(size)
        obj = pickle.loads(data)
        return obj

    def access(self, path, mode):
        sock, sockfile = self.create_sock()

        sock.sendall(b'fuse_access\n')
        sock.sendall( bytes(self.vdir+'\n', encoding="utf-8") )
        sock.sendall( bytes(path+'\n', encoding="utf-8") )
        sock.sendall( bytes(str(mode)+'\n', encoding="utf-8") )
        response = self.get_response(sockfile)
        sockfile.close()
        sock.close()
        return response

    def getattr(self, path):
        sock, sockfile = self.create_sock()
        sock.sendall(b'fuse_getattr\n')
        sock.sendall( bytes(self.vdir+'\n', encoding="utf-8") )
        sock.sendall( bytes(path+'\n', encoding="utf-8") )
        st = self.get_response(sockfile)
        sockfile.close()
        sock.close()
        return st

    def readlink(self, path) :
        pass

    def readdir(self, path) :
        sock, sockfile = self.create_sock()
        sock.sendall(b'fuse_readdir\n')
        sock.sendall( bytes(self.vdir+'\n', encoding="utf-8") )
        sock.sendall( bytes(path, encoding="utf-8") )
        sockfile.close()
        sock.close()

    def unlink(self, path) :
        pass

    def rmdir(self, path) :
        pass

    def symlink(self, path) :
        pass

    def rename(self, path, new_path) :
        pass

    def link(self, src_path, dst_path) :
        pass

    def chmod(self, path, mode) :
        pass

    def chown(self, path, user, group) :
        pass

    def truncate(self, path, length) :
        pass

    def mknod(self, path, mode, dev) :
        pass

    def mkdir(self, path, mode) :
        pass

    def utime(self, path, times) :
        pass

    def statfs(self) :
        """
        This is also fetched from the server.
        """
        pass

    class VirtualFile(object) :
        """
        RFS virtual file.
        """

        def __init__(self, path, flags, *mode) :
            pass

        def read(self, length, offset) :
            pass

        def write(self, buf, offset) :
            pass

        def release(self, flags) :
            pass

        def _fflush(self) :
            pass

        def fsync(self, isfsyncfile) :
            pass

        def flush(self) : # Called on file close().
            self._fflush()
            pass

        def fgetattr(self) :
            pass

        def ftruncate(self) :
            pass

        def lock(self, cmd, owner, **kw) :
            pass

    def main(self, *a, **kw) :
        self.file_class = self.VirtualFile
        return Fuse.main(self, *a, **kw)



if __name__ == '__main__' :
    usage = f"""
    RADFS : mirror the filesystem tree from some other machine.
    {sys.argv[0]} remote_hostname:remote_path mount_point
    """ + Fuse.fusage

    remote_path = sys.argv[1]
    sys.argv = sys.argv[:1]+sys.argv[2:]

    host_name, path = remote_path.split(':')

    fsys = RFS(host_name, path, version="%prog " + fuse.__version__,
                 usage = usage, dash_s_do='setsingle')
    fsys.parse(values=fsys, errex=1)

    fsys.main()
