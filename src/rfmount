#!/usr/bin/env python3

import os, sys
from errno import *
from stat import *
import fcntl
# pull in some spaghetti to make this stuff work without fuse-py being installed
# try:
import _find_fuse_parts
# except ImportError:
#     pass
import fuse
from fuse import Fuse

import socket
import pickle
import logging, threading
import grpc
import service_pb2
import service_pb2_grpc
import simplejson, json
import threading


if not hasattr(fuse, '__version__'):
    raise RuntimeError("your fuse-py doesn't know of fuse.__version__, probably it's too old.")

fuse.fuse_python_api = (0, 2)

fuse.feature_assert('stateful_files', 'has_init')

def flag2mode(flags):
    md = {os.O_RDONLY: 'r', os.O_WRONLY: 'w', os.O_RDWR: 'w+'}
    m = md[flags & (os.O_RDONLY | os.O_WRONLY | os.O_RDWR)]

    if flags | os.O_APPEND:
        m = m.replace('w', 'a', 1)

    return m

hostname = ""
vdir = ""
rport = 7897

class Xmp(Fuse):

    @staticmethod
    def log(s):
        f = open("/home/kira/DFS/src/rfslog.txt", "a+")
        f.write(str(s) + "\n")
        f.close()

    def __init__(self, *args, **kw):
        
        Fuse.__init__(self, *args, **kw)

        global hostname, vdir, rport
        self.hostname, self.vdir, self.rport = hostname, vdir, rport
        # Xmp.log()
        self.channel = grpc.insecure_channel('%s:%d' % (self.hostname, self.rport))
        
        # do stuff to set up your filesystem here, if you want
        #import thread
        #thread.start_new_thread(self.mythread, ())
        # self.root = '/'

#    def mythread(self):
#
#        """
#        The beauty of the FUSE python implementation is that with the python interp
#        running in foreground, you can have threads
#        """
#        print "mythread: started"
#        while 1:
#            time.sleep(120)
#            print "mythread: ticking"

    def getattr(self, path):
        Xmp.log(["getattr", path])
        
        # try:
        stub = service_pb2_grpc.GreeterStub(self.channel)
        response = stub.fuse_getattr(service_pb2.MessageRequest(mpt=self.vdir, path=path))
        ans = pickle.loads(response.pstr)    
        # except grpc.RpcError as e:
        #     Xmp.log(e)

        return ans

    def readlink(self, path):
        # return os.readlink(self.vdir + path)
        pass

    def readdir(self, path, offset):
        Xmp.log(["readdir", path])

        stub = service_pb2_grpc.GreeterStub(self.channel)
        response = stub.fuse_readdir(service_pb2.MessageRequest(mpt=self.vdir, path=path))
        ans = pickle.loads(response.pstr)

        return ans

    def unlink(self, path):
        # os.unlink(self.vdir + path)
        pass

    def rmdir(self, path):
        # os.rmdir(self.vdir + path)
        pass

    def symlink(self, path, path1):
        # os.symlink(path, self.vdir + path1)
        pass

    def rename(self, path, path1):
        # os.rename(self.vdir + path, self.vdir + path1)
        pass

    def link(self, path, path1):
        # os.link(self.vdir + path, self.vdir + path1)
        pass

    def chmod(self, path, mode):
        # os.chmod(self.vdir + path, mode)
        pass

    def chown(self, path, user, group):
        # os.chown(self.vdir + path, user, group)
        pass

    def truncate(self, path, len):
        # f = open(self.vdir + path, "a")
        # f.truncate(len)
        # f.close()
        pass

    def mknod(self, path, mode, dev):
        # os.mknod(self.vdir + path, mode, dev)
        pass

    def mkdir(self, path, mode):
        # os.mkdir(self.vdir + path, mode)
        pass

    def utime(self, path, times):
        # os.utime(self.vdir + path, times)
        pass

#    The following utimens method would do the same as the above utime method.
#    We can't make it better though as the Python stdlib doesn't know of
#    subsecond preciseness in acces/modify times.
#  
#    def utimens(self, path, ts_acc, ts_mod):
#      os.utime(self.vdir + path, (ts_acc.tv_sec, ts_mod.tv_sec))

    def access(self, path, mode):
        Xmp.log(["access", path])

        # try:
        stub = service_pb2_grpc.GreeterStub(self.channel)
        response = stub.fuse_access(service_pb2.MessageRequest(mpt=self.vdir, path=path, mode=mode))
        ans = pickle.loads(response.pstr)
        # except Exception as e:
        #     Xmp.log(str(e))

        return ans

#    This is how we could add stub extended attribute handlers...
#    (We can't have ones which aptly delegate requests to the underlying fs
#    because Python lacks a standard xattr interface.)
#
#    def getxattr(self, path, name, size):
#        val = name.swapcase() + '@' + path
#        if size == 0:
#            # We are asked for size of the value.
#            return len(val)
#        return val
#
#    def listxattr(self, path, size):
#        # We use the "user" namespace to please XFS utils
#        aa = ["user." + a for a in ("foo", "bar")]
#        if size == 0:
#            # We are asked for size of the attr list, ie. joint size of attrs
#            # plus null separators.
#            return len("".join(aa)) + len(aa)
#        return aa
    
    # do nothing
    def statfs(self):
        """
        Should return an object with statvfs attributes (f_bsize, f_frsize...).
        Eg., the return value of os.statvfs() is such a thing (since py 2.2).
        If you are not reusing an existing statvfs object, start with
        fuse.StatVFS(), and define the attributes.
        To provide usable information (ie., you want sensible df(1)
        output, you are suggested to specify the following attributes:
            - f_bsize - preferred size of file blocks, in bytes
            - f_frsize - fundamental size of file blcoks, in bytes
                [if you have no idea, use the same as blocksize]
            - f_blocks - total number of blocks in the filesystem
            - f_bfree - number of free blocks
            - f_files - total number of file inodes
            - f_ffree - nunber of free file inodes
        """
        pass
        # return os.statvfs(vdir)

    def fsinit(self):
        Xmp.log("fsinit")

    class XmpFile(object):

        def __init__(self, path, flags, *mode):
            global hostname, vdir, rport
            self.hostname, self.vdir, self.rport = hostname, vdir, rport
            self.path = path
            self.flags = flags
            self.mode = flag2mode(flags)
            Xmp.log(["fileinit", self.vdir+path, flags])

            self.channel = grpc.insecure_channel('%s:%d' % (self.hostname, self.rport))

            self.curOffset = 0

            # self.file = os.fdopen(os.open(self.vdir + path, flags, *mode),
            #                       flag2mode(flags))
            # self.fd = self.file.fileno()

        def fgetattr(self):
            Xmp.log(["fgetattr", self.vdir+self.path])

            stub = service_pb2_grpc.GreeterStub(self.channel)            
            response = stub.fuse_fgetattr(service_pb2.MessageRequest(mpt=self.vdir, path=self.path, 
                flags=self.flags))
            ans = pickle.loads(response.pstr)

            return ans

        def read(self, length, offset):
            Xmp.log(["read", self.vdir+self.path, length, offset])

            stub = service_pb2_grpc.GreeterStub(self.channel)            
            response = stub.fuse_read(service_pb2.MessageRequest(mpt=self.vdir, path=self.path,
                    length=length, offset=offset, flags=self.flags))
            ans = pickle.loads(response.pstr)

            return ans

        # do nothing
        def write(self, buf, offset):
            pass
            # self.file.seek(offset)
            # self.file.write(buf)
            # return len(buf)

        # do nothing
        def release(self, flags):
            pass
            # self.file.close()

        # do nothing
        def _fflush(self):
            pass
            # if 'w' in self.file.mode or 'a' in self.file.mode:
            #     self.file.flush()

        # do nothing
        def fsync(self, isfsyncfile):
            pass
            # self._fflush()
            # if isfsyncfile and hasattr(os, 'fdatasync'):
            #     os.fdatasync(self.fd)
            # else:
            #     os.fsync(self.fd)

        # do nothing
        def flush(self):
            pass
            # self._fflush()
            # cf. xmp_flush() in fusexmp_fh.c
            # os.close(os.dup(self.fd))

        # do nothing
        def ftruncate(self, len):
            pass
            # self.file.truncate(len)

        # do nothing
        def lock(self, cmd, owner, **kw):
            pass
            # Xmp.log("lock")
            # The code here is much rather just a demonstration of the locking
            # API than something which actually was seen to be useful.

            # Advisory file locking is pretty messy in Unix, and the Python
            # interface to this doesn't make it better.
            # We can't do fcntl(2)/F_GETLK from Python in a platfrom independent
            # way. The following implementation *might* work under Linux. 
            #
            # if cmd == fcntl.F_GETLK:
            #     import struct
            # 
            #     lockdata = struct.pack('hhQQi', kw['l_type'], os.SEEK_SET,
            #                            kw['l_start'], kw['l_len'], kw['l_pid'])
            #     ld2 = fcntl.fcntl(self.fd, fcntl.F_GETLK, lockdata)
            #     flockfields = ('l_type', 'l_whence', 'l_start', 'l_len', 'l_pid')
            #     uld2 = struct.unpack('hhQQi', ld2)
            #     res = {}
            #     for i in xrange(len(uld2)):
            #          res[flockfields[i]] = uld2[i]
            #  
            #     return fuse.Flock(**res)

            # Convert fcntl-ish lock parameters to Python's weird
            # lockf(3)/flock(2) medley locking API...
            # op = { fcntl.F_UNLCK : fcntl.LOCK_UN,
            #        fcntl.F_RDLCK : fcntl.LOCK_SH,
            #        fcntl.F_WRLCK : fcntl.LOCK_EX }[kw['l_type']]
            # if cmd == fcntl.F_GETLK:
            #     return -EOPNOTSUPP
            # elif cmd == fcntl.F_SETLK:
            #     if op != fcntl.LOCK_UN:
            #         op |= fcntl.LOCK_NB
            # elif cmd == fcntl.F_SETLKW:
            #     pass
            # else:
            #     return -EINVAL

            # fcntl.lockf(self.fd, op, kw['l_start'], kw['l_len'])


    def main(self, *a, **kw):
        
        self.file_class = self.XmpFile
        return Fuse.main(self, *a, **kw)


def main():

    global hostname
    global vdir
    hostname, vdir = sys.argv[1].split(':')
    sys.argv = [sys.argv[0], sys.argv[2]]

    usage = """
Userspace nullfs-alike: mirror the filesystem tree from some point on.
""" + Fuse.fusage

    server = Xmp(version="%prog " + fuse.__version__,
                 usage=usage,
                 dash_s_do='setsingle')

    server.parser.add_option(mountopt="root", metavar="PATH", default='/',
                             help="mirror filesystem from under PATH [default: %default]")
    server.parse(values=server, errex=1)

    server.main()


if __name__ == '__main__':
    main()
